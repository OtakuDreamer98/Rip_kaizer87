-- Load the UI library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/OtakuDreamer98/Rip_kaizer87/refs/heads/main/Rip_kaizer87Hub"))()

------------------------------------------------
-- MAIN TAB (2nd after Intro)
------------------------------------------------
local mainTab = Library:CreateTab("Main")

------------------------------------------------
-- WEAPON GIVER TAB (3rd)
------------------------------------------------
local weaponTab = Library:CreateTab("Weapon Giver")

-- Function to create weapon buttons
local function createWeaponButton(weaponName)
    weaponTab:Button("Give " .. weaponName, function()
        local args = {weaponName}
        game:GetService("ReplicatedStorage"):WaitForChild("GiveTool"):FireServer(unpack(args))
        print("Requested to give", weaponName)
    end)
end

-- Weapon list
local weapons = {
    "Energy Rifle",
    "Uzi",
    "Revolver",
    "Hunting Rifle",
    "Crossbow",
    "Sniper",
    "Shotgun",
    "Burst Rifle",
    "AR",
    "SMG",
    "Auto Shotgun",
    "Tommy Gun",
    "Grenade Launcher",
    "Minigun",
    "Railgun",
    "Blaster",
    "Annihilator"
}

-- Generate weapon buttons
for _, weapon in ipairs(weapons) do
    createWeaponButton(weapon)
end

-- Example Slider (optional)
weaponTab:Slider("Damage Multiplier", 1, 10, 1, function(value)
    print("Weapon Damage Multiplier set to", value .. "x")
end)

------------------------------------------------
-- TELEPORT TAB (4th)
------------------------------------------------
local teleportTab = Library:CreateTab("Teleport")

-- Teleport function
local function teleportTo(part)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
    end
end

-- Teleport buttons
teleportTab:Button("Teleport to House", function()
    local house = game:GetService("Workspace"):WaitForChild("HouseHitbox")
    teleportTo(house)
end)

teleportTab:Button("Teleport to Sawmill", function()
    local sawmill = game:GetService("Workspace"):WaitForChild("Sawmill"):WaitForChild("DropperBase"):WaitForChild("Main Conveyor")
    teleportTo(sawmill)
end)

------------------------------------------------
-- AIMBOT TAB (5th)
------------------------------------------------
local aimbotTab = Library:CreateTab("Aimbot")

-- === AIMBOT CORE ===
local RunService = game:GetService("RunService")
local Cam = workspace.CurrentCamera
local Player = game:GetService("Players").LocalPlayer

local fov = 120
local isAiming = false
local validNPCs = {}
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

local FOVring = Drawing.new("Circle")
FOVring.Visible = false
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(255, 255, 255)
FOVring.Filled = false
FOVring.Radius = fov
FOVring.Position = Cam.ViewportSize / 2

-- NPC check
local function isNPC(obj)
    return obj:IsA("Model")
        and obj:FindFirstChild("Humanoid")
        and obj.Humanoid.Health > 0
        and obj:FindFirstChild("Head")
        and obj:FindFirstChild("HumanoidRootPart")
        and not game:GetService("Players"):GetPlayerFromCharacter(obj)
end

local function updateNPCs()
    local tempTable = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if isNPC(obj) then
            tempTable[obj] = true
        end
    end
    for i = #validNPCs, 1, -1 do
        if not tempTable[validNPCs[i]] then
            table.remove(validNPCs, i)
        end
    end
    for obj in pairs(tempTable) do
        if not table.find(validNPCs, obj) then
            table.insert(validNPCs, obj)
        end
    end
end

local function updateDrawings()
    FOVring.Position = Cam.ViewportSize / 2
    FOVring.Radius = fov * (Cam.ViewportSize.Y / 1080)
end

local function predictPos(target)
    local rootPart = target:FindFirstChild("HumanoidRootPart")
    local head = target:FindFirstChild("Head")
    if not rootPart or not head then return end
    local velocity = rootPart.Velocity
    local predictionTime = 0.02
    local basePosition = rootPart.Position + velocity * predictionTime
    local headOffset = head.Position - rootPart.Position
    return basePosition + headOffset
end

local function getTarget()
    local nearest, minDistance = nil, math.huge
    local viewportCenter = Cam.ViewportSize / 2
    raycastParams.FilterDescendantsInstances = {Player.Character}
    for _, npc in ipairs(validNPCs) do
        local predictedPos = predictPos(npc)
        local screenPos, visible = Cam:WorldToViewportPoint(predictedPos)
        if visible and screenPos.Z > 0 then
            local ray = workspace:Raycast(Cam.CFrame.Position, (predictedPos - Cam.CFrame.Position).Unit * 1000, raycastParams)
            if ray and ray.Instance:IsDescendantOf(npc) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - viewportCenter).Magnitude
                if distance < minDistance and distance < fov then
                    minDistance = distance
                    nearest = npc
                end
            end
        end
    end
    return nearest
end

local function aim(targetPosition)
    local currentCF = Cam.CFrame
    local targetDirection = (targetPosition - currentCF.Position).Unit
    local smoothFactor = 0.581
    local newLookVector = currentCF.LookVector:Lerp(targetDirection, smoothFactor)
    Cam.CFrame = CFrame.new(currentCF.Position, currentCF.Position + newLookVector)
end

RunService.Heartbeat:Connect(function()
    updateDrawings()
    updateNPCs()
    if isAiming then
        local target = getTarget()
        if target then
            local predictedPosition = predictPos(target)
            if predictedPosition then
                aim(predictedPosition)
            end
        end
    end
end)

-- === AIMBOT TAB UI ===
aimbotTab:Toggle("Enable Aimbot", false, function(state)
    isAiming = state
    FOVring.Visible = state
    print("Aimbot is now", state and "ON" or "OFF")
end)

aimbotTab:Slider("FOV Size", 50, 300, fov, function(value)
    fov = value
    print("FOV set to", value)
end)

-- FOV Color buttons
aimbotTab:Button("Set FOV Color: White", function() FOVring.Color = Color3.fromRGB(255, 255, 255) end)
aimbotTab:Button("Set FOV Color: Red", function() FOVring.Color = Color3.fromRGB(255, 0, 0) end)
aimbotTab:Button("Set FOV Color: Green", function() FOVring.Color = Color3.fromRGB(0, 255, 0) end)
aimbotTab:Button("Set FOV Color: Blue", function() FOVring.Color = Color3.fromRGB(0, 0, 255) end)
